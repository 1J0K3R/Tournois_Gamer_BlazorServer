@page "/InscriptionIndividuel"
@using Tournois_Gamer_BlazorServer.Data.Evenement.Interfaces;
@using Tournois_Gamer_BlazorServer.Data.Evenement.Models;
@using Tournois_Gamer_BlazorServer.Data.Evenement.Services;
@using Tournois_Gamer_BlazorServer.Data.Inscription;
@using System.Threading;
@inject IEventServices eventServices
@inject NavigationManager NavManager


<EditForm Model="@inscription" OnSubmit="OnValidSubmit">
    <ObjectGraphDataAnnotationsValidator />
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mud-grid">
        <div class="mud-item mud-xs-12 mud-sm-7">
            <div class="mud-card">
                <div class="mud-card-content">
                    <h6 class="text-decoration-underline">INSCRIPTION TOURNOI INDIVIDUEL :</h6>

                    <div class="form-group">
                        <label>Nom du joueur</label>
                        <input class="form-control" @bind-value="inscription.Player.Name" />
                        <small class="form-text text-muted">Max. 20 caractères</small>
                    </div>

                    <div class="form-group">
                        <label>Prénom</label>
                        <input class="form-control" @bind="inscription.Player.FirstName" />
                        <small class="form-text text-muted">Max. 20 caractères</small>
                    </div>

                    <div class="form-group">
                        <label>Date de naissance</label>
                        <input type="date" class="form-control" @bind="inscription.Player.DateBorn" />
                    </div>

                    <div class="form-group">
                        <label>Pseudo du joueur</label>
                        <input class="form-control" @bind="inscription.Player.Pseudo" />
                        <small class="form-text text-muted">Max. 20 caractères</small>
                    </div>

                    <br />
                    <h6 class="text-decoration-underline">Tournoi choisi :</h6>

                    <div class="form-group d-flex">
                        @foreach (var tournament in tournamentList)
                        {
                            <div class="form-check form-check-inline">
                                <input type="radio" class="form-check-input" value="@tournament.Value" checked="@Equals(inscription.Tournament, tournament.Value)" @onchange="() => SetTournament(tournament.Value)" />
                                <label class="form-check-label">@($"{tournament.Value.TournamentName.Name} {tournament.Value.Platform}")</label>
                            </div>
                        }
                    </div>
                </div>

                <div class="mud-card-actions">
                    <button type="submit" class="btn btn-primary ml-auto">Inscription</button>
                </div>

                <h6 class="text-decoration-underline">@messageGoodInscription</h6>

            </div>
        </div>
    </div>
</EditForm>


@code {
    private InscriptionIndividualDto inscription = new ();

    private PlayerDto player = new();

    private Dictionary<int, TournamentDto> tournamentList = new();

    private EventDto? event_;

    private string messageGoodInscription = string.Empty;

    private void ShowMessageAndRedirect()
    {
        messageGoodInscription = "Votre inscription à bien été prise en compte !";
        Thread.Sleep(2000);
        NavManager.NavigateTo("/");
    }

    /// <summary>
    /// Méthode exécuté à l'initialization de la page
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        event_ = await eventServices.GetEventAsync();

        foreach (TournamentDto tournament in event_.TournamentList)
        {
            if (tournament.IsTeam is false)
            {
                tournamentList.Add(tournament.TournamentId, tournament);
            }
        }
        inscription.Player = player;
    }

    private void SetTournament(TournamentDto tournament)
    {
        inscription.Tournament = tournament;
    }

    /// <summary>
    /// Méthode exécuté à la validation du formulaire
    /// </summary>
    /// <param name="context"></param>
    private void OnValidSubmit(EditContext context)
    {
        if (context.Validate())
        {
            inscription.InscriptionIndividualDtoId = 1;
            ShowMessageAndRedirect();
            StateHasChanged();
        }
    }
}