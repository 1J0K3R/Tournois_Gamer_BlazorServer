@page "/InscriptionEquipe"
@using System.ComponentModel.DataAnnotations;
@using Tournois_Gamer_BlazorServer.Data.Evenement.Interfaces;
@using Tournois_Gamer_BlazorServer.Data.Evenement.Models;
@using Tournois_Gamer_BlazorServer.Data.Evenement.Services;
@using Tournois_Gamer_BlazorServer.Data.Inscription;
@inject IEventServices eventServices

<EditForm Model="@inscription" OnSubmit="OnValidSubmit">
    <ObjectGraphDataAnnotationsValidator />
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-12 col-sm-7">
            <div class="card">
                <div class="card-body">
                    <h6 class="text-decoration-underline">INSCRIPTION TOURNOI PAR EQUIPE :</h6>

                    <br />

                    <h6 class="text-decoration-underline">Nom de l'équipe :</h6>
                    <InputText class="form-control" @bind-Value="inscription.Name" />

                    <br />

                    <h6 class="text-decoration-underline">Tournoi choisi :</h6>
                    <div class="d-flex">
                        @foreach (var tournament in tournamentList)
                        {
                            <div class="form-check">
                                <input type="radio" class="form-check-input" value="@tournament.Value" checked="@Equals(inscription.Tournament, tournament.Value)" @onchange="() => CreatePlayers(tournament.Value)" />
                                <label class="form-check-label pr-5">@($"{tournament.Value.TournamentName.Name} {tournament.Value.Platform}")</label>
                            </div>
                        }
                    </div>

                    <br />

                    <h6 class="text-decoration-underline">Composition de l'équipe :</h6>

                    <table class="table">
                        <thead>
                            <tr>
                                <th>NAME</th>
                                <th>FIRSTNAME</th>
                                <th>DATEBORN</th>
                                <th>PSEUDO</th>
                                <th>CAPITAINE</th>
                            </tr>
                        </thead>
                        <tbody>
                            
                            @foreach (PlayerDto player in inscription.Players)
                            {
                                <tr>
                                        <td><input type="text" class="form-control" @bind="player.Name" /></td>
                                        <td><input type="text" class="form-control" @bind="player.FirstName" /></td>
                                        <td><input type="date" class="form-control" @bind="player.DateBorn" /></td>
                                        <td><input type="text" class="form-control" @bind="player.Pseudo" /></td>
                                        <td><div class="form-check">
                                            <input type="radio" class="form-check-input" value="@player" checked="@Equals(inscription.PlayersIdCaptain, player)" @onchange="() => inscription.PlayersIdCaptain = player" />
                                            <label class="form-check-label">Capitaine</label>
                                        </div></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <br />
                </div>

                <div class="card-footer">
                    <button type="submit" class="btn btn-primary ml-auto">Register</button>
                </div>
            </div>
        </div>
    </div>

</EditForm>

@code {
    private InscriptionTeamDto inscription = new();
    private Dictionary<int, TournamentDto> tournamentList = new();
    private EventDto? event_;

    private PlayerDto captain = new();

    private string errorMessage = string.Empty;

    /// <summary>
    /// Méthode exécuté à l'initialization de la page
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        event_ = await eventServices.GetEventAsync();

        foreach (TournamentDto tournament in event_.TournamentList)
        {
            if (tournament.IsTeam is true)
            {
                tournamentList.Add(tournament.TournamentId, tournament);
            }
        }
        inscription.Players = new();
    }

    /// <summary>
    /// Méthode exécuté à la création des joueurs
    /// </summary>
    /// <param name="tournament"></param>
    private void CreatePlayers(TournamentDto tournament)
    {
        inscription.Tournament = tournament;
        inscription.Players.Clear();
        for (int i = 0; i < tournament.PlayerNbrPerTeam; i++)
        {
            inscription.Players.Add(new());
        }
    }
    

    /// <summary>
    /// Méthode exécuté à la validation du formulaire
    /// </summary>
    /// <param name="context"></param>
    private void OnValidSubmit(EditContext context)
    {
        if (context.Validate())
        {
            inscription.InscriptionTeamDtoId = 1;

            StateHasChanged();
        }
        else
        {
            errorMessage = "Certains champs sont incorrects. Veuillez vérifier le formulaire.";
            // Le formulaire n'est pas valide, ne rien faire ou afficher un message d'erreur supplémentaire si nécessaire
        }
    }
}