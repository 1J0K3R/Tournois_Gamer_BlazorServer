@page "/"
@using Tournois_Gamer_BlazorServer.Data.Evenement.Interfaces;
@using Tournois_Gamer_BlazorServer.Data.Evenement.Models;
@using Tournois_Gamer_BlazorServer.Data.Evenement.Services;
@inject IEventServices eventServices

<PageTitle>LyonEsport</PageTitle>


<h5 >EVENEMENT « @event_.DatesString »</h5>
<br />

<h6 Class="text-decoration-underline">Dates</h6>
<h6> - @event_.DatesString</h6>

<br />

<h6 class="text-decoration-underline" >Horaires</h6>
@foreach(var schedule in event_.Schedules)
{
    <h6> - @schedule</h6>
}
<br />

<h6 class="text-decoration-underline">Lieu</h6>
<h6> - @event_.Place</h6>
<br />

<h6 class="text-decoration-underline">L’événement « @event_.DatesString » propose les tournois suivants :</h6>
@foreach (var tournament in event_.TournamentNameList)
{
    <h6> - @tournament.Name</h6>
}
<br />
<br />

<h6 class="text-decoration-underline">Conditions d’engagement :</h6>
<br />

<table class="table">
    <thead>
        <tr>
            <th>Tournoi</th>
            <th>Nombre d’équipes</th>
            <th>Joueurs / Equipe</th>
            <th>Plateforme</th>
            <th>Frais d’inscription (€)</th>
            <th>Cash Prize</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in event_.TournamentList)
        {
            <tr>
                <td>@GetTournamentPlatform(@forecast.TournamentName.Name, @forecast.Platform)</td>
                <td>@forecast.TeamNbr</td>
                <td>@forecast.PlayerNbrPerTeam</td>
                <td>@forecast.Platform</td>
                <td>@forecast.CostEntry</td>
                <td>@GetCashPrize(@forecast.CashPrize)</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private EventDto? event_;

    public string GetTournamentPlatform(string tournamentName, string platform)
    {
        if(platform == "PC") //Mettre un tuple pour harmonisé ?
        {
            return tournamentName;
        }
        else
        {
            return string.Concat(tournamentName, " ", platform);
        }        
    }

    /// <summary>
    /// retourne une chaine équivalente à
    /// "Vainqueur : 5 000 €
    ///  Finaliste : 2 000 €"
    /// </summary>
    /// <param name="cashPrize"></param>
    /// <returns></returns>
    public string GetCashPrize(CashPrizeDto cashPrize)
    {
        return string.Concat("Vainqueur : ", cashPrize.WinnersPrice, " €", Environment.NewLine, "Finaliste : ", cashPrize.FinalistPrice, " €");
    }

    protected override async Task OnInitializedAsync()
    {
        event_ = await eventServices.GetEventAsync();
    }
}